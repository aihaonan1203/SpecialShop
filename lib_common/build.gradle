apply plugin: 'com.android.library'
apply plugin: 'maven'
android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }



}

dependencies {

    api fileTree(dir: 'libs', include: ['*.jar'])
    testApi 'junit:junit:4.12'
    //noinspection GradleCompatible
    androidTestApi 'com.android.support.test:runner:1.0.2'
    androidTestApi 'com.android.support.test.espresso:espresso-core:3.0.2'

    // Support libraries
    api deps.support.app_compat
    api deps.support.v4
    api deps.support.design
    api deps.support.cardview
    api deps.support.recyclerview

    // Architecture components
    api deps.lifecycle.runtime
    api deps.lifecycle.extensions
    annotationProcessor deps.lifecycle.compiler
    api deps.room.runtime
    annotationProcessor deps.room.compiler

    //fresco
    api 'com.facebook.fresco:fresco:1.5.0'
    api "com.facebook.fresco:imagepipeline-okhttp3:1.5.0"

    // butterknife
    api deps.butterknife.runtime
    annotationProcessor deps.butterknife.compiler

    //http
    api deps.retrofit.runtime
    api deps.retrofit.gson
    api deps.retrofit.adapter_rxjava2
    api deps.okhttp.okhttp3
    api deps.okhttp.okhttp3_logging_interceptor

    // RxJava
//    implementation deps.rxjava2
    api deps.rx_android

    //router
    api deps.arouter.runtime
    //logutils
    api deps.logutils

    api 'q.rorbin:VerticalTabLayout:1.2.5'
    //定制吐司
    api 'com.github.GrenderG:Toasty:1.2.8'

    api 'me.drakeet.materialdialog:library:1.3.1'
    api 'com.zhy:base-rvadapter:3.0.3'
    api 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
}

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            snapshotRepository(url: getsSnapshotUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            repository(url: getReleaseUrl()) {
                authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
            }
            pom.project {
                version '1.0.0'
                artifactId 'lib-common'
                groupId getGroupId()
                packaging getType()
                description getDescription()
            }
        }
    }
}

artifacts {
    archives file('lib_opensource.aar')
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getsSnapshotUrl() {
    return hasProperty('MAVEN_REPO_SNAPSHOT_URL') ? MAVEN_REPO_SNAPSHOT_URL : ""
}

def getReleaseUrl() {
    return hasProperty('MAVEN_REPO_RELEASE_URL') ? MAVEN_REPO_RELEASE_URL : ""
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}
def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def getGroupId() {
    return hasProperty('GROUP_ID') ? GROUP_ID : ""
}
def getType() {
    return hasProperty('TYPE') ? TYPE : ""
}
def getDescription() {
    return hasProperty('DESCRIPTION') ? DESCRIPTION : ""
}